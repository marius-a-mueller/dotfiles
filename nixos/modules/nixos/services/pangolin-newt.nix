{ pkgs, lib, config, ... }:
let
  domain = "pangolin.mindful-student.net";
  id = "";
  secret = "";
  version = "1.0.0";
in {
  options = {
    pangolin-newt.enable = lib.mkEnableOption "pangolin-newt";
  };
  config = lib.mkIf config.pangolin-newt.enable {
    # Runtime
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
      defaultNetwork.settings = {
        # Required for container networking to be able to use names.
        dns_enabled = true;
      };
    };

    # Enable container name DNS for non-default Podman networks.
    # https://github.com/NixOS/nixpkgs/issues/226365
    networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

    virtualisation.oci-containers.backend = "podman";

    # Containers
    virtualisation.oci-containers.containers."newt" = {
      image = "fosrl/newt:${version}";
      environment = {
        "NEWT_ID" = "${id}";
        "NEWT_SECRET" = "${secret}";
        "PANGOLIN_ENDPOINT" = "https://${domain}";
      };
      log-driver = "journald";
      extraOptions = [
        "--network-alias=newt"
        "--network=newt_default"
        "--add-host=host.docker.internal:host-gateway"
      ];
    };
    systemd.services."podman-newt" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-newt_default.service"
      ];
      requires = [
        "podman-network-newt_default.service"
      ];
      partOf = [
        "podman-compose-newt-root.target"
      ];
      wantedBy = [
        "podman-compose-newt-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-newt_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f newt_default";
      };
      script = ''
        podman network inspect newt_default || podman network create newt_default
      '';
      partOf = [ "podman-compose-newt-root.target" ];
      wantedBy = [ "podman-compose-newt-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-newt-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
